-- üè∑ Tabla MAE_TIPO_USUARIO (User Types)

USE MASTER 
GO

CREATE DATABASE 
DoorAccessDB

USE DoorAccessDB
GO


CREATE TABLE dbo.MAE_TIPO_USUARIO
(
    ID_TIPO_USUARIO INT IDENTITY(1,1) PRIMARY KEY,
    DETALLE_USUARIO VARCHAR(20) NOT NULL UNIQUE,
    ESTADO BIT NOT NULL CHECK (ESTADO IN (0, 1)) -- 0 = Inactivo, 1 = Activo
);
GO

-- üè∑ Tabla MAE_SEXO (Gender)
CREATE TABLE dbo.MAE_SEXO
(
    ID_SEXO INT IDENTITY(1,1) PRIMARY KEY,
    DESCRIPCION VARCHAR(10) NOT NULL UNIQUE CHECK (DESCRIPCION IN ('Masculino', 'Femenino'))
);
GO

-- üë§ Tabla MAE_USUARIO (Users/Residents)
CREATE TABLE dbo.MAE_USUARIO
(
    ID_USUARIO INT IDENTITY(1,1) PRIMARY KEY,
    NRO_DPTO INT,
    NOMBRES VARCHAR(50) NOT NULL,
    APELLIDOS VARCHAR(50) NOT NULL,
    DNI VARCHAR(8) NOT NULL UNIQUE,
    CORREO VARCHAR(100) NULL,
    CELULAR VARCHAR(9) UNIQUE CHECK (CELULAR LIKE '[9]________'),
    CONTACTO_EMERGENCIA VARCHAR(9) CHECK (CONTACTO_EMERGENCIA LIKE '[9]________'),
    FECHA_NACIMIENTO DATE,
    ID_TIPO_USUARIO INT NOT NULL,
    ID_SEXO INT NOT NULL,
    DETALLE VARCHAR(100),
    OBSERVACIONES VARCHAR(200),
    COMITE BIT NOT NULL CHECK (COMITE IN (0, 1)), -- 0 = No, 1 = S√≠
    USUARIO VARCHAR(50) UNIQUE NOT NULL,
    CONTRASENA_HASH VARCHAR(255) NOT NULL,  
    CONTRASENA_SALT VARCHAR(50) NOT NULL,
    ESTADO BIT NOT NULL CHECK (ESTADO IN (0, 1)),

    -- Claves for√°neas
    CONSTRAINT FK_USUARIO_TIPO_USUARIO FOREIGN KEY (ID_TIPO_USUARIO) REFERENCES MAE_TIPO_USUARIO(ID_TIPO_USUARIO),
    CONSTRAINT FK_USUARIO_SEXO FOREIGN KEY (ID_SEXO) REFERENCES MAE_SEXO(ID_SEXO)
);
GO

-- üê∂ Tabla MAE_MASCOTA (Pets)
CREATE TABLE dbo.MAE_MASCOTA
(
    ID_MASCOTA INT IDENTITY(1,1) PRIMARY KEY,
    NOMBRE VARCHAR(50) NOT NULL,
    TIPO VARCHAR(20) NOT NULL CHECK (TIPO IN ('Perro', 'Gato', 'Ave', 'Otro')),
    RAZA VARCHAR(50),
    EDAD INT CHECK (EDAD >= 0),
    DNI_DUENO VARCHAR(8) NOT NULL,

    -- Clave for√°nea
    CONSTRAINT FK_MASCOTA_USUARIO FOREIGN KEY (DNI_DUENO) REFERENCES MAE_USUARIO(DNI) ON DELETE CASCADE
);
GO

-- üìÇ Tabla MAE_MENU (Main Menus)
CREATE TABLE dbo.MAE_MENU
(
    ID_MENU INT IDENTITY(1,1) PRIMARY KEY,
    NOMBRE VARCHAR(50) NOT NULL UNIQUE,
    ICONO VARCHAR(50) NULL,
    URL VARCHAR(100) NULL,
    ORDEN INT NOT NULL,
    ESTADO BIT NOT NULL CHECK (ESTADO IN (0, 1))
);
GO

-- üìÇ Tabla MAE_SUBMENU (Submenus)
CREATE TABLE dbo.MAE_SUBMENU
(
    ID_SUBMENU INT IDENTITY(1,1) PRIMARY KEY,
    ID_MENU INT NOT NULL,
    NOMBRE VARCHAR(50) NOT NULL UNIQUE,
    ICONO VARCHAR(50) NULL,
    URL VARCHAR(100) NOT NULL,
    ORDEN INT NOT NULL,
    ESTADO BIT NOT NULL CHECK (ESTADO IN (0, 1)),

    -- Clave for√°nea
    CONSTRAINT FK_SUBMENU_MENU FOREIGN KEY (ID_MENU) REFERENCES MAE_MENU(ID_MENU) ON DELETE CASCADE
);
GO

-- üîê Tabla MAE_ROL_MENU (Menu Permissions by User Type)
CREATE TABLE dbo.MAE_ROL_MENU
(
    ID_TIPO_USUARIO INT NOT NULL,
    ID_MENU INT NOT NULL,

    CONSTRAINT FK_ROL_MENU_TIPO FOREIGN KEY (ID_TIPO_USUARIO) REFERENCES MAE_TIPO_USUARIO(ID_TIPO_USUARIO) ON DELETE CASCADE,
    CONSTRAINT FK_ROL_MENU_MENU FOREIGN KEY (ID_MENU) REFERENCES MAE_MENU(ID_MENU) ON DELETE CASCADE
);
GO

-- üîê Tabla MAE_ROL_SUBMENU (Submenu Permissions by User Type)
CREATE TABLE dbo.MAE_ROL_SUBMENU
(
    ID_TIPO_USUARIO INT NOT NULL,
    ID_SUBMENU INT NOT NULL,

    CONSTRAINT FK_ROL_SUBMENU_TIPO FOREIGN KEY (ID_TIPO_USUARIO) REFERENCES MAE_TIPO_USUARIO(ID_TIPO_USUARIO) ON DELETE CASCADE,
    CONSTRAINT FK_ROL_SUBMENU_SUBMENU FOREIGN KEY (ID_SUBMENU) REFERENCES MAE_SUBMENU(ID_SUBMENU) ON DELETE CASCADE
);
GO

-- üè¢ Tabla MAE_PROPIETARIO (Property Owners)
CREATE TABLE dbo.MAE_PROPIETARIO
(
    ID_PROPIETARIO INT IDENTITY(1,1) PRIMARY KEY,
    DNI VARCHAR(8) NOT NULL,
    NRO_DPTO INT NOT NULL,
    FECHA_INICIO_PROPIEDAD DATE NOT NULL,
    FECHA_FIN_PROPIEDAD DATE NULL,
    ESTADO BIT NOT NULL CHECK (ESTADO IN (0, 1)),

    -- Claves for√°neas
    CONSTRAINT FK_PROPIETARIO_USUARIO FOREIGN KEY (DNI) REFERENCES MAE_USUARIO(DNI) ON DELETE CASCADE,
    CONSTRAINT CHK_FECHA_PROPIEDAD CHECK (FECHA_FIN_PROPIEDAD IS NULL OR FECHA_FIN_PROPIEDAD > FECHA_INICIO_PROPIEDAD)
);
GO

-- üìú Tabla MAE_DOCUMENTO_ADMIN (Administrative Documents)
CREATE TABLE dbo.MAE_DOCUMENTO_ADMIN
(
    ID_DOCUMENTO INT IDENTITY(1,1) PRIMARY KEY,
    TITULO VARCHAR(100) NOT NULL,
    DESCRIPCION VARCHAR(255) NULL,
    TIPO_DOCUMENTO VARCHAR(50) NOT NULL CHECK (TIPO_DOCUMENTO IN ('Reglamento', 'Contrato', 'Informe', 'Otro')),
    RUTA_ARCHIVO VARCHAR(255) NOT NULL,
    FECHA_SUBIDA DATE NOT NULL DEFAULT GETDATE(),
    ID_USUARIO_SUBIDA INT NOT NULL,
    ESTADO BIT NOT NULL CHECK (ESTADO IN (0, 1)),

    -- Clave for√°nea
    CONSTRAINT FK_DOCUMENTO_USUARIO FOREIGN KEY (ID_USUARIO_SUBIDA) REFERENCES MAE_USUARIO(ID_USUARIO) ON DELETE NO ACTION
);
GO

-- üö™ Tabla MAE_VISITA (Visits)
CREATE TABLE dbo.MAE_VISITA
(
    ID_VISITA INT IDENTITY(1,1) PRIMARY KEY,
    NRO_DPTO INT NOT NULL,
    NOMBRE_VISITANTE VARCHAR(100) NOT NULL,
    DNI_VISITANTE VARCHAR(8) NOT NULL,
    FECHA_INGRESO DATETIME NOT NULL DEFAULT GETDATE(),
    FECHA_SALIDA DATETIME NULL,
    MOTIVO VARCHAR(100) NULL,
    ID_USUARIO_REGISTRO INT NOT NULL,
    ESTADO BIT NOT NULL CHECK (ESTADO IN (0, 1)),

    -- Claves for√°neas
    CONSTRAINT FK_VISITA_USUARIO FOREIGN KEY (ID_USUARIO_REGISTRO) REFERENCES MAE_USUARIO(ID_USUARIO) ON DELETE NO ACTION,
    CONSTRAINT CHK_FECHA_VISITA CHECK (FECHA_SALIDA IS NULL OR FECHA_SALIDA > FECHA_INGRESO)
);
GO

-- üîß Tabla MAE_PROVEEDOR (Suppliers)
CREATE TABLE dbo.MAE_PROVEEDOR
(
    ID_PROVEEDOR INT IDENTITY(1,1) PRIMARY KEY,
    NOMBRE VARCHAR(100) NOT NULL,
    RUC VARCHAR(11) NOT NULL UNIQUE CHECK (RUC LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'),
    TELEFONO VARCHAR(9) NULL CHECK (TELEFONO LIKE '[9]________'),
    CORREO VARCHAR(100) NULL,
    TIPO_SERVICIO VARCHAR(50) NOT NULL CHECK (TIPO_SERVICIO IN ('Mantenimiento', 'Limpieza', 'Seguridad', 'Otro')),
    ESTADO BIT NOT NULL CHECK (ESTADO IN (0, 1))
);
GO

-- üîß Tabla MAE_MANTENIMIENTO (Maintenance by Suppliers)
CREATE TABLE dbo.MAE_MANTENIMIENTO
(
    ID_MANTENIMIENTO INT IDENTITY(1,1) PRIMARY KEY,
    ID_PROVEEDOR INT NOT NULL,
    DESCRIPCION VARCHAR(255) NOT NULL,
    FECHA_MANTENIMIENTO DATE NOT NULL,
    COSTO DECIMAL(10, 2) NOT NULL CHECK (COSTO >= 0),
    NRO_DPTO INT NULL,
    ID_USUARIO_REGISTRO INT NOT NULL,
    ESTADO BIT NOT NULL CHECK (ESTADO IN (0, 1)),

    -- Claves for√°neas
    CONSTRAINT FK_MANTENIMIENTO_PROVEEDOR FOREIGN KEY (ID_PROVEEDOR) REFERENCES MAE_PROVEEDOR(ID_PROVEEDOR) ON DELETE NO ACTION,
    CONSTRAINT FK_MANTENIMIENTO_USUARIO FOREIGN KEY (ID_USUARIO_REGISTRO) REFERENCES MAE_USUARIO(ID_USUARIO) ON DELETE NO ACTION
);
GO

-- üì¶ Tabla MAE_ENCARGO (Packages/Deliveries)
CREATE TABLE dbo.MAE_ENCARGO
(
    ID_ENCARGO INT IDENTITY(1,1) PRIMARY KEY,
    NRO_DPTO INT NOT NULL,
    DESCRIPCION VARCHAR(255) NOT NULL,
    FECHA_RECEPCION DATETIME NOT NULL DEFAULT GETDATE(),
    FECHA_ENTREGA DATETIME NULL,
    ID_USUARIO_RECEPCION INT NOT NULL,
    ID_USUARIO_ENTREGA INT NULL,
    ESTADO BIT NOT NULL CHECK (ESTADO IN (0, 1)),

    -- Claves for√°neas
    CONSTRAINT FK_ENCARGO_USUARIO_RECEPCION FOREIGN KEY (ID_USUARIO_RECEPCION) REFERENCES MAE_USUARIO(ID_USUARIO) ON DELETE NO ACTION,
    CONSTRAINT FK_ENCARGO_USUARIO_ENTREGA FOREIGN KEY (ID_USUARIO_ENTREGA) REFERENCES MAE_USUARIO(ID_USUARIO) ON DELETE NO ACTION,
    CONSTRAINT CHK_FECHA_ENCARGO CHECK (FECHA_ENTREGA IS NULL OR FECHA_ENTREGA > FECHA_RECEPCION)
);
GO

-- üí∏ Tabla MAE_DEUDOR (Debtors/Delinquents)
CREATE TABLE dbo.MAE_DEUDOR
(
    ID_DEUDA INT IDENTITY(1,1) PRIMARY KEY,
    DNI VARCHAR(8) NOT NULL,
    NRO_DPTO INT NOT NULL,
    MONTO DECIMAL(10, 2) NOT NULL CHECK (MONTO > 0),
    FECHA_VENCIMIENTO DATE NOT NULL,
    FECHA_PAGO DATE NULL,
    DESCRIPCION VARCHAR(255) NOT NULL,
    ESTADO BIT NOT NULL CHECK (ESTADO IN (0, 1)),

    -- Clave for√°nea
    CONSTRAINT FK_DEUDOR_USUARIO FOREIGN KEY (DNI) REFERENCES MAE_USUARIO(DNI) ON DELETE CASCADE,
    CONSTRAINT CHK_FECHA_PAGO CHECK (FECHA_PAGO IS NULL OR FECHA_PAGO >= FECHA_VENCIMIENTO)
);
GO

-- üìÖ Tabla MAE_RESERVA (Reservations)
CREATE TABLE dbo.MAE_RESERVA
(
    ID_RESERVA INT IDENTITY(1,1) PRIMARY KEY,
    NRO_DPTO INT NOT NULL,
    TIPO_AREA VARCHAR(50) NOT NULL CHECK (TIPO_AREA IN ('Sal√≥n de Fiestas', 'Parrilla', 'Piscina', 'Otro')),
    FECHA_RESERVA DATE NOT NULL,
    HORA_INICIO TIME NOT NULL,
    HORA_FIN TIME NOT NULL,
    ID_USUARIO INT NOT NULL,
    ESTADO BIT NOT NULL CHECK (ESTADO IN (0, 1)),

    -- Clave for√°nea
    CONSTRAINT FK_RESERVA_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES MAE_USUARIO(ID_USUARIO) ON DELETE NO ACTION,
    CONSTRAINT CHK_HORA_RESERVA CHECK (HORA_FIN > HORA_INICIO)
);
GO

-- üìù Tabla MAE_ACTA (Meeting Minutes)
CREATE TABLE dbo.MAE_ACTA
(
    ID_ACTA INT IDENTITY(1,1) PRIMARY KEY,
    TITULO VARCHAR(100) NOT NULL,
    FECHA_REUNION DATE NOT NULL,
    DESCRIPCION TEXT NOT NULL,
    RUTA_ARCHIVO VARCHAR(255) NULL,
    ID_USUARIO_REGISTRO INT NOT NULL,
    ESTADO BIT NOT NULL CHECK (ESTADO IN (0, 1)),

    -- Clave for√°nea
    CONSTRAINT FK_ACTA_USUARIO FOREIGN KEY (ID_USUARIO_REGISTRO) REFERENCES MAE_USUARIO(ID_USUARIO) ON DELETE NO ACTION
);
GO

-- ‚ö†Ô∏è Tabla MAE_INCIDENCIA (Incidents)
CREATE TABLE dbo.MAE_INCIDENCIA
(
    ID_INCIDENCIA INT IDENTITY(1,1) PRIMARY KEY,
    NRO_DPTO INT NOT NULL,
    TIPO_INCIDENCIA VARCHAR(50) NOT NULL CHECK (TIPO_INCIDENCIA IN ('Ruido', 'Mantenimiento', 'Seguridad', 'Otro')),
    DESCRIPCION TEXT NOT NULL,
    FECHA_REPORTE DATETIME NOT NULL DEFAULT GETDATE(),
    FECHA_RESOLUCION DATETIME NULL,
    ID_USUARIO_REPORTE INT NOT NULL,
    ID_USUARIO_RESOLUCION INT NULL,
    ESTADO BIT NOT NULL CHECK (ESTADO IN (0, 1)),

    -- Claves for√°neas
    CONSTRAINT FK_INCIDENCIA_USUARIO_REPORTE FOREIGN KEY (ID_USUARIO_REPORTE) REFERENCES MAE_USUARIO(ID_USUARIO) ON DELETE NO ACTION,
    CONSTRAINT FK_INCIDENCIA_USUARIO_RESOLUCION FOREIGN KEY (ID_USUARIO_RESOLUCION) REFERENCES MAE_USUARIO(ID_USUARIO) ON DELETE NO ACTION,
    CONSTRAINT CHK_FECHA_INCIDENCIA CHECK (FECHA_RESOLUCION IS NULL OR FECHA_RESOLUCION > FECHA_REPORTE)
);
GO

-- üì¢ Tabla MAE_AVISO (Notices)
CREATE TABLE dbo.MAE_AVISO
(
    ID_AVISO INT IDENTITY(1,1) PRIMARY KEY,
    TITULO VARCHAR(100) NOT NULL,
    DESCRIPCION TEXT NOT NULL,
    FECHA_PUBLICACION DATETIME NOT NULL DEFAULT GETDATE(),
    FECHA_EXPIRACION DATETIME NULL,
    ID_USUARIO_PUBLICACION INT NOT NULL,
    ESTADO BIT NOT NULL CHECK (ESTADO IN (0, 1)),

    -- Clave for√°nea
    CONSTRAINT FK_AVISO_USUARIO FOREIGN KEY (ID_USUARIO_PUBLICACION) REFERENCES MAE_USUARIO(ID_USUARIO) ON DELETE NO ACTION,
    CONSTRAINT CHK_FECHA_AVISO CHECK (FECHA_EXPIRACION IS NULL OR FECHA_EXPIRACION > FECHA_PUBLICACION)
);
GO

-- üö™ Tabla MAE_PUERTA (Doors)
CREATE TABLE dbo.MAE_PUERTA
(
    ID_PUERTA INT IDENTITY(1,1) PRIMARY KEY,
    NOMBRE VARCHAR(50) NOT NULL UNIQUE,
    DESCRIPCION VARCHAR(255) NULL,
    ESTADO BIT NOT NULL CHECK (ESTADO IN (0, 1))
);
GO

-- üîë Tabla MAE_QR (QR Codes for Doors)
CREATE TABLE dbo.MAE_QR
(
    ID_QR INT IDENTITY(1,1) PRIMARY KEY,
    QR_DATA VARCHAR(255) NOT NULL UNIQUE,
    ID_PUERTA INT NOT NULL,
    ESTADO BIT NOT NULL CHECK (ESTADO IN (0, 1)),

    -- Clave for√°nea
    CONSTRAINT FK_QR_PUERTA FOREIGN KEY (ID_PUERTA) REFERENCES MAE_PUERTA(ID_PUERTA) ON DELETE CASCADE
);
GO

-- üîê Tabla MAE_QR_TIPO_USUARIO (QR Code Permissions by User Type)
CREATE TABLE dbo.MAE_QR_TIPO_USUARIO
(
    ID_QR INT NOT NULL,
    ID_TIPO_USUARIO INT NOT NULL,

    -- Claves for√°neas
    CONSTRAINT FK_QR_TIPO_QR FOREIGN KEY (ID_QR) REFERENCES MAE_QR(ID_QR) ON DELETE CASCADE,
    CONSTRAINT FK_QR_TIPO_TIPO_USUARIO FOREIGN KEY (ID_TIPO_USUARIO) REFERENCES MAE_TIPO_USUARIO(ID_TIPO_USUARIO) ON DELETE CASCADE,
    PRIMARY KEY (ID_QR, ID_TIPO_USUARIO)
);
GO

-- üìú Tabla MAE_ACCESO_PUERTA (Door Access Logs)
CREATE TABLE dbo.MAE_ACCESO_PUERTA
(
    ID_ACCESO INT IDENTITY(1,1) PRIMARY KEY,
    ID_QR INT NOT NULL,
    ID_USUARIO INT NOT NULL,
    FECHA_ACCESO DATETIME NOT NULL DEFAULT GETDATE(),
    EXITO BIT NOT NULL CHECK (EXITO IN (0, 1)),
    MOTIVO_FALLO VARCHAR(255) NULL,

    -- Claves for√°neas
    CONSTRAINT FK_ACCESO_QR FOREIGN KEY (ID_QR) REFERENCES MAE_QR(ID_QR) ON DELETE NO ACTION,
    CONSTRAINT FK_ACCESO_USUARIO FOREIGN KEY (ID_USUARIO) REFERENCES MAE_USUARIO(ID_USUARIO) ON DELETE NO ACTION
);
GO

-- üõ†Ô∏è Indexes for Performance
CREATE INDEX IDX_MAE_USUARIO_DNI ON MAE_USUARIO(DNI);
CREATE INDEX IDX_MAE_VISITA_FECHA_INGRESO ON MAE_VISITA(FECHA_INGRESO);
CREATE INDEX IDX_MAE_DEUDOR_ESTADO ON MAE_DEUDOR(ESTADO);
CREATE INDEX IDX_MAE_QR_QR_DATA ON MAE_QR(QR_DATA);
CREATE INDEX IDX_MAE_ACCESO_PUERTA_FECHA ON MAE_ACCESO_PUERTA(FECHA_ACCESO);
GO

-- üìä View for Active Debtors Report
CREATE VIEW VW_DEUDORES_ACTIVOS
AS
SELECT 
    u.NOMBRES, 
    u.APELLIDOS, 
    d.NRO_DPTO, 
    d.MONTO, 
    d.FECHA_VENCIMIENTO, 
    DATEDIFF(DAY, d.FECHA_VENCIMIENTO, GETDATE()) AS DIAS_MOROSOS
FROM MAE_DEUDOR d
JOIN MAE_USUARIO u ON d.DNI = u.DNI
WHERE d.ESTADO = 0;
GO


---------

-- User Types
INSERT INTO MAE_TIPO_USUARIO (DETALLE_USUARIO, ESTADO)
VALUES ('Admin', 1), ('Residente', 1);

-- Genders
INSERT INTO MAE_SEXO (DESCRIPCION)
VALUES ('Masculino'), ('Femenino');

-- Users
INSERT INTO MAE_USUARIO (
    NRO_DPTO, NOMBRES, APELLIDOS, DNI, CORREO, CELULAR, CONTACTO_EMERGENCIA, 
    FECHA_NACIMIENTO, ID_TIPO_USUARIO, ID_SEXO, DETALLE, OBSERVACIONES, 
    COMITE, USUARIO, CONTRASENA_HASH, CONTRASENA_SALT, ESTADO
)
VALUES (
    101, 'Test', 'User', '12345678', 'test@example.com', '987654321', '912345678',
    '1990-01-01', 1, 1, 'Test user for door access', NULL,
    0, 'testuser', 'temp_hash', 'temp_salt', 1
);

-- Doors
INSERT INTO MAE_PUERTA (NOMBRE, DESCRIPCION, ESTADO)
VALUES ('Main Entrance', 'Main entrance door', 1);

-- QR Codes
INSERT INTO MAE_QR (QR_DATA, ID_PUERTA, ESTADO)
VALUES ('qr_code_123', 1, 1);

-- QR Code Permissions
INSERT INTO MAE_QR_TIPO_USUARIO (ID_QR, ID_TIPO_USUARIO)
VALUES (1, 1), (1, 2); -- ID_QR = 1 (qr_code_123), ID_TIPO_USUARIO = 1 (Admin), 2 (Residente)

-- Menu and Submenu for Door Access
INSERT INTO MAE_MENU (NOMBRE, ICONO, URL, ORDEN, ESTADO)
VALUES ('Acceso Puertas', 'door', NULL, 1, 1);

INSERT INTO MAE_SUBMENU (ID_MENU, NOMBRE, ICONO, URL, ORDEN, ESTADO)
VALUES (1, 'Abrir Puerta', 'qr_code', '/abrir-puerta', 1, 1);

-- Grant access to Admin and Residente
INSERT INTO MAE_ROL_MENU (ID_TIPO_USUARIO, ID_MENU)
VALUES (1, 1), (2, 1);

INSERT INTO MAE_ROL_SUBMENU (ID_TIPO_USUARIO, ID_SUBMENU)
VALUES (1, 1), (2, 1);



ALTER TABLE MAE_ACCESO_PUERTA
ALTER COLUMN ID_QR INT NULL;

ALTER TABLE MAE_USUARIO
ALTER COLUMN CONTRASENA_SALT VARCHAR(50) NULL;

-----------------

select * from MAE_ACCESO_PUERTA
truncate table MAE_ACCESO_PUERTA


SELECT * FROM MAE_USUARIO WHERE CORREO = 'test@example.com';

SELECT CONTRASENA_HASH FROM MAE_USUARIO WHERE CORREO = 'test@example.com';

SELECT CONTRASENA_HASH FROM MAE_USUARIO WHERE CORREO = 'test@example.com';


INSERT INTO MAE_PUERTA (NOMBRE, DESCRIPCION, ESTADO)
VALUES 
    ('Main Entrance', 'Main entrance door', 1),
    ('Back Entrance', 'Back entrance door', 1),
    ('Garage Door', 'Garage entrance door', 1);

	INSERT INTO MAE_QR (QR_DATA, ID_PUERTA, ESTADO)
VALUES 
    ('qr_code_123', 1, 1), -- Para Main Entrance
    ('qr_code_456', 2, 1), -- Para Back Entrance
    ('qr_code_789', 3, 1); -- Para Garage Door


	INSERT INTO MAE_QR_TIPO_USUARIO (ID_QR, ID_TIPO_USUARIO)
VALUES 
    (1, 1), (1, 2), -- Main Entrance: Admin y Residente
    (2, 1),         -- Back Entrance: Solo Admin
    (3, 1), (3, 2); -- Garage Door: Admin y Residente

	INSERT INTO MAE_QR_TIPO_USUARIO (ID_QR, ID_TIPO_USUARIO)
VALUES 
    (2,2)


	INSERT INTO MAE_ROL_MENU (ID_TIPO_USUARIO, ID_MENU)
VALUES (1, 1), (2, 1);

INSERT INTO MAE_ROL_SUBMENU (ID_TIPO_USUARIO, ID_SUBMENU)
VALUES (1, 1), (2, 1);

SELECT * FROM MAE_TIPO_USUARIO
SELECT * FROM MAE_PUERTA;

SELECT * FROM MAE_QR;

SELECT qt.*, t.DETALLE_USUARIO, p.NOMBRE AS PUERTA
FROM MAE_QR_TIPO_USUARIO qt
JOIN MAE_TIPO_USUARIO t ON qt.ID_TIPO_USUARIO = t.ID_TIPO_USUARIO
JOIN MAE_QR q ON qt.ID_QR = q.ID_QR
JOIN MAE_PUERTA p ON q.ID_PUERTA = p.ID_PUERTA;

INSERT INTO MAE_TIPO_USUARIO (DETALLE_USUARIO, ESTADO)
VALUES ('Vigilancia', 1);

SELECT * FROM MAE_TIPO_USUARIO;


INSERT INTO MAE_USUARIO (
    NRO_DPTO, NOMBRES, APELLIDOS, DNI, CORREO, CELULAR, CONTACTO_EMERGENCIA, 
    FECHA_NACIMIENTO, ID_TIPO_USUARIO, ID_SEXO, DETALLE, OBSERVACIONES, 
    COMITE, USUARIO, CONTRASENA_HASH, CONTRASENA_SALT, ESTADO
)
VALUES (
    NULL, 'Juan', 'P√©rez', '87654321', 'vigilancia@example.com', '912345678', '987654321',
    '1985-05-15', 3, 1, 'Usuario de vigilancia', NULL,
    0, 'vigilancia', 'temp_hash', NULL, 1
);

SELECT * FROM MAE_USUARIO WHERE CORREO = 'vigilancia@example.com';


INSERT INTO MAE_QR_TIPO_USUARIO (ID_QR, ID_TIPO_USUARIO)
VALUES 
    (1, 3), -- Main Entrance: Vigilancia
    (2, 3), -- Back Entrance: Vigilancia
    (3, 3); -- Garage Door: Vigilancia


	SELECT qt.*, t.DETALLE_USUARIO, p.NOMBRE AS PUERTA
FROM MAE_QR_TIPO_USUARIO qt
JOIN MAE_TIPO_USUARIO t ON qt.ID_TIPO_USUARIO = t.ID_TIPO_USUARIO
JOIN MAE_QR q ON qt.ID_QR = q.ID_QR
JOIN MAE_PUERTA p ON q.ID_PUERTA = p.ID_PUERTA;


SELECT * FROM MAE_ROL_MENU;
SELECT * FROM MAE_ROL_SUBMENU;

INSERT INTO MAE_ROL_MENU (ID_TIPO_USUARIO, ID_MENU)
VALUES (3, 1);

INSERT INTO MAE_ROL_SUBMENU (ID_TIPO_USUARIO, ID_SUBMENU)
VALUES (3, 1);


ALTER TABLE MAE_USUARIO
DROP COLUMN CONTRASENA_SALT;


DELETE FROM MAE_USUARIO WHERE CORREO IN ('test@example.com', 'vigilancia@example.com');